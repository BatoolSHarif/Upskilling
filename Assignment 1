{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=input(\"Insert string : \")\n",
    "f=int(x)\n",
    "print(type(x))\n",
    "print(type(f))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=input(\"Enter the first number:\")\n",
    "y=input(\"Enter the second number:\")\n",
    "print(x,y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "p=input(\"Enter a number :\")\n",
    "p=int(p)\n",
    "q=p/3\n",
    "if q==1 :\n",
    "    print (\"devisable\")\n",
    "else:\n",
    "    print(\"Not divisable\")    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter the first number:\")\n",
    "b=input(\"Enter the second number:\")\n",
    "c=input(\"Enter the third number:\")\n",
    "a=int(a)\n",
    "b=int(b)\n",
    "c=int(c)\n",
    "\n",
    "x=(-b+c**4)/(2*a)\n",
    "xx=(3*(a+b**2))/c\n",
    "x1=x-xx\n",
    "print(int(x))\n",
    "print(int(xx))\n",
    "print(\"The value of X1 = \",int(x1))\n",
    "\n",
    "x2=((a+b**3)**2)/(c-a**2)\n",
    "print(\"The value of X2 = \",int(x2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter the first number:\")\n",
    "b=input(\"Enter the second number:\")\n",
    "print (max(int(a),int(b)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter the first number:\")\n",
    "b=input(\"Enter the second number:\")\n",
    "c=input(\"Enter the third number:\") \n",
    "a=int(a)\n",
    "b=int(b)\n",
    "c=int(c)\n",
    "\n",
    "print(\"The Maximum Number  Is : \",max(a,b,c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter the first number:\")\n",
    "b=input(\"Enter the second number:\")\n",
    "b=int(b)\n",
    "a=int(a)\n",
    "if b==0:\n",
    "    print ('\"b is 0\"')\n",
    "else:\n",
    "    print (int(b*(a/b)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number of days:1000\n",
      "The number of Years :  2\n",
      "The number of month :  9.0\n",
      "The number of days :  460.0\n"
     ]
    }
   ],
   "source": [
    "a=input(\"Enter the number of days:\")\n",
    "a=int(a)\n",
    "year = int(a/365)\n",
    "month=a/30\n",
    "day=a\n",
    "print (\"The number of Years : \",year)\n",
    "print (\"The number of month : \",month)\n",
    "print (\"The number of days : \",abs((year*365)-(month*30)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter the temperature in Celsius:\"))\n",
    "int(a)\n",
    "a=(a*(9/5))+32\n",
    "print (\"The temperature in Fahrenheit is = \",a,\" F\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=int(input(\"Enter the first number:\"))\n",
    "y=int(input(\"Enter the second number:\"))\n",
    "(x**2-y**2)=(x-y)\n",
    "z="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter your r Q-Range (”deviation IQ”):\")\n",
    "a=int(a)\n",
    "if a>= 130:\n",
    "    print (\"Very Superior\")\n",
    "else:\n",
    "    if a>=120 and a<=129:\n",
    "        print (\"Superior\")\n",
    "    else:\n",
    "        if a>=110 and a<=119:\n",
    "            print (\"High Average\")\n",
    "        else:\n",
    "            if a>=90 and a<=109:\n",
    "                print (\"Average\")\n",
    "            else:\n",
    "                if a>=80 and a<=89:\n",
    "                    print ('Low Average')\n",
    "                else:\n",
    "                    if a>=70 and a<=79:\n",
    "                        print (' Borderline')\n",
    "                    else:\n",
    "                     if a<=69:\n",
    "                        print ('Extremely Low')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter your Grade Please :\")\n",
    "a=int(a)\n",
    "if a>= 90 and a<=100:\n",
    "    print (\"[90-100] : A\")\n",
    "else:\n",
    "    if a>=80 and a<90:\n",
    "        print (\"[80-90] : B\")\n",
    "    else:\n",
    "        if a>=70 and a<80:\n",
    "            print (\"[70-80] : C\")\n",
    "        else:\n",
    "            if a>=60 and a<70:\n",
    "                print (\"[60-70] : D\")\n",
    "            else:\n",
    "                if a>=50 and a<60:\n",
    "                    print ('[50-60] : E')\n",
    "                else:\n",
    "                    if a>=0 and a<50:\n",
    "                        print (' [0-50] : F')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter the first number:\")\n",
    "b=input(\"Enter the second number:\")\n",
    "c=input(\"Enter the third number:\") \n",
    "a=int(a)\n",
    "b=int(b)\n",
    "c=int(c)\n",
    "\n",
    "sum=a**2+b**2\n",
    "if sum ==c**2:\n",
    "    print (\"They Are Equal\")\n",
    "else:\n",
    "    print (\"They Are not Equal according to this Equaion 'a^2 + b^2 =c^2'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter an alphabet:\")\n",
    "v='a,A,o,O,u,U,i,I,e,E'\n",
    "if a in v:\n",
    "    print (\"the alphabet \"+a+\" is Vowel\")\n",
    "else:\n",
    "    print (\"the alphabet \"+a+\" is Consonant\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter a number:\")\n",
    "a=int(a)\n",
    "if a/2 ==0:\n",
    "    print (\"Is an Odd Number\")\n",
    "else:\n",
    "    print (\"Is an Even Number\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "now = datetime.now()\n",
    "dt_string = now.strftime(\"%Y/%m/%d %H:%M:%S\")\n",
    "print(\"Current date and time =\", dt_string)\t\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "r=float(input(\"Enter the raduis: \"))\n",
    "print(\"r =\",r)\n",
    "print (\"Area = \",math.pi*r**2 ,\" m2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "name=input(\"Enter your first and Last name : \")\n",
    "print (\"Reverse Name :\",list(reversed(name)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1\n",
      "1\n",
      "1\n",
      "\n",
      "The examination will start from 1 / 1 / 1\n"
     ]
    }
   ],
   "source": [
    "a=input(\"(\")\n",
    "b=input(\"\")\n",
    "c=input(\"\")\n",
    "print()\n",
    "a=int(a)\n",
    "b=int(b)\n",
    "c=int(c)\n",
    "\n",
    "print(\"The examination will start from\",a,\"/\",b,\"/\",c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number:5\n",
      "Sample value of n is 5\n",
      "Expected Result : 615\n"
     ]
    }
   ],
   "source": [
    "n=int(input(\"Enter a number:\"))\n",
    "num= (n+ ((n*10)+n) + ((n*100)+(n*10)+n))\n",
    "print(\"Sample value of n is\",n )\n",
    "print(\"Expected Result :\",num )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Return the absolute value of the argument.\n"
     ]
    }
   ],
   "source": [
    "print(abs.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "from datetime import date\n",
    "import math\n",
    "date1=date(2014,7,2)\n",
    "date2=date(2014,7,11)\n",
    "dd=date1-date2\n",
    "print(abs(dd.days))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the raduis: 10\n",
      "r = 10.0\n",
      "Area =  4188.790204786391  m3\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "r=float(input(\"Enter the raduis: \"))\n",
    "print(\"r =\",r)\n",
    "print (\"Area = \",(4/3)*math.pi*r**3 ,\" m3\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number : 5\n",
      "12\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"Enter a number : \"))\n",
    "if num>17:\n",
    "    absDouble=(abs(17-num))**2\n",
    "    print(absDouble)\n",
    "else:\n",
    "    print(17-num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a Number : 10\n",
      "50.0\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"Enter a Number : \"))\n",
    "if num<100 or num<1000 or num<2000:\n",
    "    print((num/5)*25)\n",
    "else:\n",
    "    print(\"Greater than 100 or 1000 or 2000\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the first number:4\n",
      "Enter the second number:4\n",
      "Enter the third number:4\n",
      "They Are Equal\n",
      "1728\n"
     ]
    }
   ],
   "source": [
    "a=input(\"Enter the first number:\")\n",
    "b=input(\"Enter the second number:\")\n",
    "c=input(\"Enter the third number:\") \n",
    "a=int(a)\n",
    "b=int(b)\n",
    "c=int(c)\n",
    "\n",
    "sum=a+b+c\n",
    "if a==b and a==c and b==c:\n",
    "    print (\"They Are Equal\")\n",
    "    print (sum**3)\n",
    "else:\n",
    "    print (\"They Are not Equal\")\n",
    "    print(sum)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the first number:5\n",
      "Enter the second number:5\n",
      "The Swaped Value of 5 is :  5\n",
      "The Swaped Value of 5 is :  5\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"Enter the first number:\"))\n",
    "b=int(input(\"Enter the second number:\"))\n",
    "asw=b\n",
    "bsw=a\n",
    "print(\"The Swaped Value of\",a,\"is\",\": \",asw)\n",
    "print(\"The Swaped Value of\",b,\"is\",\": \",bsw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a Number : 2\n",
      "2 -> [1, 5, 8, 3] False\n"
     ]
    }
   ],
   "source": [
    "L1=int(input(\"Enter a Number : \"))\n",
    "List=[1,5,8,3]\n",
    "if L1 in List :\n",
    "    print(L1,\"->\",List,\"True\")\n",
    "else:\n",
    "    print(L1,\"->\",List,\"False\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Base:5\n",
      "Enter hight:5\n",
      "The Area Of The Triangel =  12.5\n"
     ]
    }
   ],
   "source": [
    "base=int(input(\"Enter Base:\"))\n",
    "hight=int(input(\"Enter hight:\"))\n",
    "print(\"The Area Of The Triangel = \",(1/2)*base*hight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the first number:2\n",
      "Enter the second number:1\n",
      "Enter the third number:2\n",
      "They Are Equal\n",
      "sum=  0\n"
     ]
    }
   ],
   "source": [
    "a=input(\"Enter the first number:\")\n",
    "b=input(\"Enter the second number:\")\n",
    "c=input(\"Enter the third number:\") \n",
    "a=int(a)\n",
    "b=int(b)\n",
    "c=int(c)\n",
    "\n",
    "sum=a+b+c\n",
    "if a==b or a==c or b==c:\n",
    "    print (\"They Are Equal\")\n",
    "    sum=0\n",
    "    print (\"sum= \",sum)\n",
    "else:\n",
    "    print (\"They Are not Equal\")\n",
    "    print(sum)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the first number:5\n",
      "Enter the second number:5\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "a=input(\"Enter the first number:\")\n",
    "b=input(\"Enter the second number:\")\n",
    "a=int(a)\n",
    "b=int(b)\n",
    "sum=a+b\n",
    "if sum>=15 and sum<=20:\n",
    "    print (\"sum= \",20)\n",
    "else:\n",
    "    if sum>=30 and sum<=40:\n",
    "        print (\"sum= \",50)\n",
    "    else:\n",
    "        if sum>=150 and sum<=167:\n",
    "            print (\"sum= \",210)\n",
    "        else:\n",
    "            print(sum)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the first number:5\n",
      "Enter the second number:5\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "a=input(\"Enter the first number:\")\n",
    "b=input(\"Enter the second number:\")\n",
    "a=int(a)\n",
    "b=int(b)\n",
    "if a==b or a+b==5 or abs(a-b)==5:\n",
    "    print (a==b)\n",
    "else:\n",
    "    print(a==b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the first number:5\n",
      "Enter the second number:6\n",
      "(( 5 + 6 )**2)=  121\n"
     ]
    }
   ],
   "source": [
    "x=input(\"Enter the first number:\")\n",
    "y=input(\"Enter the second number:\")\n",
    "x=int(x)\n",
    "y=int(y)\n",
    "\n",
    "sol=(x+y)*(x+y)\n",
    "print(\"((\",x,\"+\",y,\")**2)= \",sol)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter X1 , Y1 : 1 3\n",
      "Enter X2 , Y2 : 5 7\n",
      "The disctance btween 2 Points =  5.656854249492381\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "x1,y1=input(\"Enter X1 , Y1 : \").split()\n",
    "x2,y2=input(\"Enter X2 , Y2 : \").split()\n",
    "x1=int(x1)\n",
    "y1=int(y1)\n",
    "x2=int(x2)\n",
    "y2=int(y2)\n",
    "\n",
    "dis=math.sqrt(((x2-x1)**2)+((y2-y1)**2))\n",
    "print(\"The disctance btween 2 Points = \",dis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on built-in function sum in module builtins:\n",
      "\n",
      "sum(iterable, start=0, /)\n",
      "    Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n",
      "    \n",
      "    When the iterable is empty, return the start value.\n",
      "    This function is intended specifically for use with numeric values and may\n",
      "    reject non-numeric types.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Insert 1 for feet or 2 for Inches : \n"
     ]
    }
   ],
   "source": [
    "print (\"Insert 1 for feet or 2 for Inches : \")\n",
    "choose=int(input())\n",
    "if choose==1:\n",
    "    x=input(\"Enter the hight in feet :\")\n",
    "    x=int(x)\n",
    "    print(\"The FeetHight in centimeters = \",x*30.48,\" cm\")\n",
    "else:\n",
    "    y=input(\"Enter the hight Inches : \")\n",
    "    y=int(y)\n",
    "    print(\"The InchesHight in centimeters = \",y*2.54,\" cm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "a=int(input(\"Enter the first number:\"))\n",
    "b=int(input(\"Enter the second number:\"))\n",
    "hypotenuse =math.sqrt((a**2+b**2)) \n",
    "print(\"The hypotenuse = \",hypotenuse)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Insert 1 for Inches or 2 for yards or 3 for miles : \n",
      "1\n",
      "Enter the distance in feet :5\n",
      "The FeetDistances in Inches =  60  Inche\n"
     ]
    }
   ],
   "source": [
    "print (\"Insert 1 for Inches or 2 for yards or 3 for miles : \")\n",
    "choose=int(input())\n",
    "if choose==1:\n",
    "    x=input(\"Enter the distance in feet :\")\n",
    "    x=int(x)\n",
    "    print(\"The FeetDistances in Inches = \",x*12,\" Inche\")\n",
    "else:\n",
    "    if  choose==2:\n",
    "        y=input(\"Enter the Distances in Feet : \")\n",
    "        y=int(y)\n",
    "        print(\"The Distances in Yards = \",y*0.33333,\" yards\")\n",
    "    else:\n",
    "        if choose==3:\n",
    "            z=input(\"Enter the Distances in Feet : \")\n",
    "            z=int(z)\n",
    "            print(\"The Distances in miles = \",z* 0.00018939,\" mile\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter min :1000000\n",
      "Days =  694.4444444444445\n",
      "Moths =  29.239766081871345\n",
      "Years=  1.9290123456790123\n"
     ]
    }
   ],
   "source": [
    "mins=int(input(\"Enter min :\"))\n",
    "days=mins/1440\n",
    "month = mins/34200\n",
    "year = mins/518400\n",
    "print(\"Days = \",days)\n",
    "print(\"Moths = \",month)\n",
    "print(\"Years= \",year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter years :24\n",
      "Days =  8760\n",
      "Moths =  288\n"
     ]
    }
   ],
   "source": [
    "year=int(input(\"Enter years :\"))\n",
    "days=year*365\n",
    "month = year*12\n",
    "print(\"Days = \",days)\n",
    "print(\"Moths = \",month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter height :5.8\n",
      "Enter Weight :85\n",
      "your body Mass index is=  2.5267538644470866\n"
     ]
    }
   ],
   "source": [
    "height=float(input(\"Enter height :\"))\n",
    "Weight=float(input(\"Enter Weight :\"))\n",
    "mass=Weight/(height*height)\n",
    "print(\"your body Mass index is= \",mass)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 8, 3, 0, 8]\n",
      "The Sorted Numbers : [0, 2, 3, 8, 8]\n"
     ]
    }
   ],
   "source": [
    "l=[2,8,3,0,8]\n",
    "print (l)\n",
    "l2=sorted(l)\n",
    "print (\"The Sorted Numbers :\",l2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']\n"
     ]
    }
   ],
   "source": [
    "import math            \n",
    "math_ls = dir(math) \n",
    "print(math_ls)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "char=input(\"Enter char to get its ASCII code :\")\n",
    "print(\"The ASII code for \",char,\"is\",ord(char))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter String 1 :v\n"
     ]
    }
   ],
   "source": [
    "str1=input(\"Enter String 1 :\")\n",
    "str2=input(\"Enter String 2:\")\n",
    "str3=input(\"Enter String 3 :\")\n",
    "str4=input(\"Enter String 4 :\")\n",
    "print(str1+str2+str3+str4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter any String :22\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "str1=input(\"Enter any String :\")\n",
    "T=str1.isnumeric()\n",
    "print(T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter num :1\n",
      "Hello :\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "descriptor 'clear' of 'set' object needs an argument",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-11-6eae59e93279>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Hello :\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m==\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m     \u001b[0mset\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclear\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: descriptor 'clear' of 'set' object needs an argument"
     ]
    }
   ],
   "source": [
    "x=int(input(\"Enter num :\"))\n",
    "print(\"Hello :\")\n",
    "if x==1:\n",
    "    set.clear()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter num :0\n",
      "The number : 0 is Zero\n"
     ]
    }
   ],
   "source": [
    "x=int(input(\"Enter num :\"))\n",
    "if x>0:\n",
    "    print(\"The number :\",x,\"is Positive\")\n",
    "else:\n",
    "    if x<0:\n",
    "        print(\"The number :\",x,\"is Negative\")\n",
    "    else:\n",
    "        if x==0:\n",
    "            print(\"The number :\",x,\"is Zero\")\n",
    "\n",
    "\n",
    "        \n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number10\n",
      "Yes input string  10  is an Integer.\n"
     ]
    }
   ],
   "source": [
    "x = input (\"Enter a number\")\n",
    "try:\n",
    "   val = int(x)\n",
    "   print(\"Yes input string \",val,\" is an Integer.\")\n",
    "except ValueError:\n",
    "   print(\"That's not an int!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Str1 MemLocation:  0x1c21fd48fb8 \n",
      " Str2 MemLocation:  0x1c21fd48fb8\n"
     ]
    }
   ],
   "source": [
    "str1=\"python\"      \n",
    "str2=\"python\"\n",
    "ID1=hex(id(str1))\n",
    "ID2=hex(id(str2))\n",
    "print(\"Str1 MemLocation: \",hex(id(str1)),'\\n',\"Str2 MemLocation: \",hex(id(str2)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter String 1 :l\n",
      "Enter String 2:l\n",
      "Same Strings!\n"
     ]
    }
   ],
   "source": [
    "str1=input(\"Enter String 1 :\")   \n",
    "str2=input(\"Enter String 2:\")\n",
    "if str1==str2:\n",
    "    print(\"Same Strings!\")\n",
    "else:\n",
    "    print(\"Not the same strings !\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number :5\n",
      "num =  5\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"Enter number :\"))     \n",
    "print(\"num = \",num)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-24-1232bebd99c0>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-24-1232bebd99c0>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    str1=input(\"Enter String 1 :\")       57\u001b[0m\n\u001b[1;37m                                          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "str1=input(\"Enter String 1 :\")           \n",
    "print(str1.islower())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "str1=input(\"Enter String 1 :\")\n",
    "print(\"Original String: \",str1)\n",
    "str1 = str1.ljust(8, '0')\n",
    "print(\"After Extinding :\",str1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number :50\n",
      "Original String:  0b110010\n",
      "After Extinding : 00110010\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"Enter number :\"))\n",
    "print(\"Original String: \",bnum)\n",
    "print(\"After Extinding :\",format(num,'08b'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter x and y numbers :1,0\n",
      "The Value of x is : 1 \n",
      " The Value of y is : 0\n"
     ]
    }
   ],
   "source": [
    "x,y=input(\"Enter x and y numbers :\").split(\",\")\n",
    "print(\"The Value of x is :\",int((x)),\"\\n\",\"The Value of y is :\",int(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number :50\n",
      "d=  50\n",
      "h=  0x32\n"
     ]
    }
   ],
   "source": [
    "d=int(input(\"Enter number :\"))\n",
    "print(\"d= \",d)\n",
    "h=hex(d)\n",
    "print(\"h= \",h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter 5 numbers :2,1,8,6,8\n",
      "For Max Enter 1  For min Enter 2 :\n",
      "2\n",
      "Max = 1\n"
     ]
    }
   ],
   "source": [
    "x,y,z,g,h=input(\"Enter 5 numbers :\").split(\",\")\n",
    "x=int(x)\n",
    "y=int(y)\n",
    "z=int(z)\n",
    "g=int(g)\n",
    "h=int(h)\n",
    "maxi=0\n",
    "mini=0\n",
    "print(\"For Max Enter 1  For min Enter 2 :\")\n",
    "t=int(input())\n",
    "if t==1:\n",
    "    if x>y and x>z and x>g and x>h:\n",
    "        maxi=x\n",
    "        print(\"Max =\",maxi)\n",
    "    else:\n",
    "        if y>x and y>z and y>g and y>h:\n",
    "            maxi=y\n",
    "            print(\"Max =\",maxi)\n",
    "        else:\n",
    "            if z>x and z>y and z>g and z>h:\n",
    "                maxi=z\n",
    "                print(\"Max =\",maxi)\n",
    "            else:\n",
    "                if g>x and g>z and g>y and g>h:\n",
    "                    maxi=g\n",
    "                    print(\"Max =\",maxi)\n",
    "                else:\n",
    "                    if h>x and h>z and h>g and h>y:\n",
    "                        maxi=h\n",
    "                        print(\"Max =\",maxi)\n",
    "                    else:\n",
    "                        print(\"Equal mnubers!\")\n",
    "else:\n",
    "    if x<y and x<z and x<g and x<h:\n",
    "        maxi=x\n",
    "        print(\"Max =\",maxi)\n",
    "    else:\n",
    "        if y<x and y<z and y<g and y<h:\n",
    "            maxi=y\n",
    "            print(\"Max =\",maxi)\n",
    "        else:\n",
    "            if z<x and z<y and z<g and z<h:\n",
    "                maxi=z\n",
    "                print(\"Max =\",maxi)\n",
    "            else:\n",
    "                if g<x and g<z and g<y and g<h:\n",
    "                    maxi=g\n",
    "                    print(\"Max =\",maxi)\n",
    "                else:\n",
    "                    if h<x and h<z and h<g and h<y:\n",
    "                        maxi=h\n",
    "                        print(\"Max =\",maxi)\n",
    "                    else:\n",
    "                        print(\"Equal mnubers!\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
